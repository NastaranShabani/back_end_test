datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique // Unique index for fast lookups
  username      String         @unique // Unique index for fast lookups
  password      String
  salt          String
  sessionToken  String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userTreasures UserTreasure[]
  fromTrades    Trade[]        @relation("FromUserTrades")
  toTrades      Trade[]        @relation("ToUserTrades")
  statistics    Statistic?
  leaderboard   Leaderboard?

  @@index([email], name: "email_idx")
  @@index([username], name: "username_idx")
}

model Treasure {
  id            Int            @id @default(autoincrement())
  name          String
  type          String
  value         Int
  createdAt     DateTime       @default(now())
  userTreasures UserTreasure[]
}

// Associative table for User and Treasure (many-to-many relationship)
model UserTreasure {
  id         Int      @id @default(autoincrement())
  userId     Int
  treasureId Int
  quantity   Int      @default(1)
  acquiredAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  trade      Trade[]
  treasure   Treasure @relation(fields: [treasureId], references: [id])

  @@unique([userId, treasureId], name: "unique_user_treasure") // Composite index for fast lookups
}

// Statistic model to keep user statistics
model Statistic {
  id                 Int      @id @default(autoincrement())
  userId             Int      @unique
  totalTreasures     Int      @default(0)
  dailyTreasures     Int      @default(0)
  weeklyTreasures    Int      @default(0)
  dailyLimitReached  Boolean  @default(false)
  weeklyLimitReached Boolean  @default(false)
  lastDailyReset     DateTime
  lastWeeklyReset    DateTime
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])
}

// Trade model to manage trading of treasures between users
model Trade {
  id             Int          @id @default(autoincrement())
  fromUserId     Int
  toUserId       Int
  userTreasureId Int
  quantity       Int          @default(1)
  status         String       @default("pending")
  createdAt      DateTime     @default(now())
  fromUser       User         @relation("FromUserTrades", fields: [fromUserId], references: [id])
  toUser         User         @relation("ToUserTrades", fields: [toUserId], references: [id])
  userTreasure   UserTreasure @relation(fields: [userTreasureId], references: [id])
}

// Leaderboard model to store ranking information
model Leaderboard {
  id         Int  @id @default(autoincrement())
  userId     Int  @unique
  totalScore Int  @default(0)
  user       User @relation(fields: [userId], references: [id])

  @@index([totalScore])
}
